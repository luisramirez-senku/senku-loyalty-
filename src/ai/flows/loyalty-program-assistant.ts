// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A virtual assistant powered by Gemini to answer loyalty program questions.
 *
 * - loyaltyProgramAssistant - A function that handles the virtual assistant process.
 * - LoyaltyProgramAssistantInput - The input type for the loyaltyProgramAssistant function.
 * - LoyaltyProgramAssistantOutput - The return type for the loyaltyProgramAssistant function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LoyaltyProgramAssistantInputSchema = z.object({
  query: z.string().describe('La consulta del usuario sobre el programa de lealtad.'),
  loyaltyProgramDetails: z.string().describe('Detalles sobre el programa de lealtad, incluidas las reglas, los beneficios y las recompensas disponibles.'),
  customerInformation: z.string().describe('Información sobre el cliente, incluido su saldo de puntos, nivel e historial de compras.'),
});
export type LoyaltyProgramAssistantInput = z.infer<typeof LoyaltyProgramAssistantInputSchema>;

const LoyaltyProgramAssistantOutputSchema = z.object({
  response: z.string().describe('La respuesta a la consulta del usuario, proporcionando información útil y resolviendo cualquier problema.'),
});
export type LoyaltyProgramAssistantOutput = z.infer<typeof LoyaltyProgramAssistantOutputSchema>;

export async function loyaltyProgramAssistant(input: LoyaltyProgramAssistantInput): Promise<LoyaltyProgramAssistantOutput> {
  return loyaltyProgramAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'loyaltyProgramAssistantPrompt',
  input: {schema: LoyaltyProgramAssistantInputSchema},
  output: {schema: LoyaltyProgramAssistantOutputSchema},
  prompt: `Eres un asistente virtual para un programa de lealtad. Tu objetivo es responder las preguntas de los usuarios y resolver problemas comunes relacionados con el programa.

  Aquí están los detalles del programa de lealtad:
  {{loyaltyProgramDetails}}

  Aquí hay información sobre el cliente:
  {{customerInformation}}

  Ahora, responde a la siguiente consulta del usuario:
  {{query}}

  Proporcione una respuesta clara, concisa y útil. Si el usuario solicita realizar una acción que no es posible, explique por qué no es posible.`,
});

const loyaltyProgramAssistantFlow = ai.defineFlow(
  {
    name: 'loyaltyProgramAssistantFlow',
    inputSchema: LoyaltyProgramAssistantInputSchema,
    outputSchema: LoyaltyProgramAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
